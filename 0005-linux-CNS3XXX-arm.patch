 arch/arm/Kconfig                |  23 +++
 arch/arm/Kconfig.debug          |   2 +-
 arch/arm/mach-cns3xxx/Kconfig   |  31 +++--
 arch/arm/mach-cns3xxx/Makefile  |   3 +
 arch/arm/mach-cns3xxx/core.c    | 105 +++++---------
 arch/arm/mach-cns3xxx/devices.c |  15 +-
 arch/arm/mach-cns3xxx/pm.c      | 302 +++++++++++++++++++++++++++++++++++++++-
 7 files changed, 398 insertions(+), 83 deletions(-)

diff --git a/arch/arm/Kconfig b/arch/arm/Kconfig
index c2724d986..887c95ca6 100644
--- a/arch/arm/Kconfig
+++ b/arch/arm/Kconfig
@@ -340,6 +340,27 @@ config ARM_SINGLE_ARMV7M
 	select SPARSE_IRQ
 	select USE_OF
 
+config ARCH_CNS3XXX
+	bool "Cavium Networks CNS3XXX family"
+	select CPU_V6K	      
+	select ARM_HAS_SG_CHAIN
+	select ARM_GIC
+	select HAVE_ARM_SCU if SMP
+	select HAVE_ARM_TWD
+	select HAVE_SMP
+	select FIQ
+	select TIMER_OF
+	select COMMON_CLK
+	select GENERIC_IRQ_MULTI_HANDLER
+	select SPARSE_IRQ
+	select MIGHT_HAVE_CACHE_L2X0
+	select MIGHT_HAVE_PCI
+	select USE_OF
+	select GENERIC_IRQ_CHIP
+        help
+          Support for Cavium Networks CNS3XXX platform.
+          This includes the Seagate Central NAS.
+
 config ARCH_EP93XX
 	bool "EP93xx-based"
 	select ARCH_SPARSEMEM_ENABLE
@@ -1276,6 +1297,7 @@ config PAGE_OFFSET
 	default PHYS_OFFSET if !MMU
 	default 0x40000000 if VMSPLIT_1G
 	default 0x80000000 if VMSPLIT_2G
+	default 0xA0000000 if CNS3XXX_HIGH_PHYS_OFFSET
 	default 0xB0000000 if VMSPLIT_3G_OPT
 	default 0xC0000000
 
@@ -1284,6 +1306,7 @@ config KASAN_SHADOW_OFFSET
 	depends on KASAN
 	default 0x1f000000 if PAGE_OFFSET=0x40000000
 	default 0x5f000000 if PAGE_OFFSET=0x80000000
+	default 0x7f000000 if PAGE_OFFSET=0xA0000000
 	default 0x9f000000 if PAGE_OFFSET=0xC0000000
 	default 0x8f000000 if PAGE_OFFSET=0xB0000000
 	default 0xffffffff
diff --git a/arch/arm/Kconfig.debug b/arch/arm/Kconfig.debug
index 644875d73..17e1ab1fa 100644
--- a/arch/arm/Kconfig.debug
+++ b/arch/arm/Kconfig.debug
@@ -1788,7 +1788,6 @@ config DEBUG_UART_VIRT
 				DEBUG_OMAP4UART2 || DEBUG_OMAP5UART2
 	default 0xfa06e000 if DEBUG_OMAP2UART3 || DEBUG_OMAP4UART4
 	default 0xfa71e000 if DEBUG_QCOM_UARTDM
-	default 0xfb002000 if DEBUG_CNS3XXX
 	default 0xfb009000 if DEBUG_REALVIEW_STD_PORT
 	default 0xfb00c000 if DEBUG_AT91_SAMA5D4_USART3
 	default 0xfb020000 if DEBUG_OMAP3UART3
@@ -1831,6 +1830,7 @@ config DEBUG_UART_VIRT
 	default 0xfefb0000 if DEBUG_OMAP1UART1 || DEBUG_OMAP7XXUART1
 	default 0xfefb0800 if DEBUG_OMAP1UART2 || DEBUG_OMAP7XXUART2
 	default 0xfefb9800 if DEBUG_OMAP1UART3 || DEBUG_OMAP7XXUART3
+	default 0xff050000 if DEBUG_CNS3XXX
 	default 0xffd01000 if DEBUG_HIP01_UART
 	default DEBUG_UART_PHYS if !MMU
 	depends on DEBUG_LL_UART_8250 || DEBUG_LL_UART_PL01X || \
diff --git a/arch/arm/mach-cns3xxx/Kconfig b/arch/arm/mach-cns3xxx/Kconfig
index 1ecf54669..731a17c05 100644
--- a/arch/arm/mach-cns3xxx/Kconfig
+++ b/arch/arm/mach-cns3xxx/Kconfig
@@ -1,12 +1,7 @@
 # SPDX-License-Identifier: GPL-2.0
-menuconfig ARCH_CNS3XXX
-	bool "Cavium Networks CNS3XXX family"
-	depends on ARCH_MULTI_V6
-	select ARM_GIC
-	help
-	  Support for Cavium Networks CNS3XXX platform.
+menu "Cavium Networks CNS3XXX family"
 
-if ARCH_CNS3XXX
+depends on ARCH_CNS3XXX
 
 config MACH_CNS3420VB
 	bool "Support for CNS3420 Validation Board"
@@ -17,4 +12,24 @@ config MACH_CNS3420VB
 	  This is a platform with an on-board ARM11 MPCore and has support
 	  for USB, USB-OTG, MMC/SD/SDIO, SATA, PCI-E, etc.
 
-endif
+config MACH_SEAGATE
+	bool "Experimental Seagate Central Single Bay"
+	depends on ATAGS
+	help
+	  This is a platform with an on-board ARM11 MPCore and has support
+	  for USB, USB-OTG, MMC/SD/SDIO, SATA, PCI-E, etc.
+
+config CNS3XXX_HIGH_PHYS_OFFSET
+    bool "High physical base address for the CNS3XXX platform"
+        depends on MMU
+	default y	
+	help
+	  CNS3XXX based systems make RAM available at physical
+	  address 0x20000000, the first 256MB of which is mirrored at
+	  physical address 0x00000000.
+	
+	  If the board has more than 256MB of RAM (unlikely), then
+	  this option allows the unit to access all of that memory
+	  by using the 0x20000000 high physical offset.
+	
+endmenu
diff --git a/arch/arm/mach-cns3xxx/Makefile b/arch/arm/mach-cns3xxx/Makefile
index 52ca6ed62..09f80cefd 100644
--- a/arch/arm/mach-cns3xxx/Makefile
+++ b/arch/arm/mach-cns3xxx/Makefile
@@ -4,3 +4,6 @@ cns3xxx-y				+= core.o pm.o
 cns3xxx-$(CONFIG_ATAGS)			+= devices.o
 cns3xxx-$(CONFIG_PCI)			+= pcie.o
 cns3xxx-$(CONFIG_MACH_CNS3420VB)	+= cns3420vb.o
+cns3xxx-$(CONFIG_MACH_SEAGATE)		+= seagate.o seagate_button.o
+cns3xxx-$(CONFIG_SMP)              	+= platsmp.o headsmp.o cns3xxx_fiq.o
+cns3xxx-$(CONFIG_HOTPLUG_CPU)         	+= hotplug.o
diff --git a/arch/arm/mach-cns3xxx/core.c b/arch/arm/mach-cns3xxx/core.c
index e4f4b20b8..fc4250072 100644
--- a/arch/arm/mach-cns3xxx/core.c
+++ b/arch/arm/mach-cns3xxx/core.c
@@ -12,48 +12,68 @@
 #include <linux/irqchip/arm-gic.h>
 #include <linux/of_platform.h>
 #include <linux/platform_device.h>
-#include <linux/usb/ehci_pdriver.h>
-#include <linux/usb/ohci_pdriver.h>
 #include <asm/mach/arch.h>
 #include <asm/mach/map.h>
 #include <asm/mach/time.h>
 #include <asm/mach/irq.h>
 #include <asm/hardware/cache-l2x0.h>
-#include "cns3xxx.h"
+//#include <mach/irqs.h>
+#include <linux/platform_data/cns3xxx.h>
 #include "core.h"
-#include "pm.h"
+#include <mach/pm.h>
 
+#define MAX(x, y) (((x) > (y)) ? (x) : (y))
 static struct map_desc cns3xxx_io_desc[] __initdata = {
 	{
 		.virtual	= CNS3XXX_TC11MP_SCU_BASE_VIRT,
 		.pfn		= __phys_to_pfn(CNS3XXX_TC11MP_SCU_BASE),
-		.length		= SZ_8K,
+		.length		= MAX(SZ_8K, PAGE_SIZE),
 		.type		= MT_DEVICE,
 	}, {
 		.virtual	= CNS3XXX_TIMER1_2_3_BASE_VIRT,
 		.pfn		= __phys_to_pfn(CNS3XXX_TIMER1_2_3_BASE),
-		.length		= SZ_4K,
+		.length		= MAX(SZ_4K, PAGE_SIZE),
 		.type		= MT_DEVICE,
 	}, {
 		.virtual	= CNS3XXX_MISC_BASE_VIRT,
 		.pfn		= __phys_to_pfn(CNS3XXX_MISC_BASE),
-		.length		= SZ_4K,
+		.length		= MAX(SZ_4K, PAGE_SIZE),
 		.type		= MT_DEVICE,
+	}, {
+	        .virtual        = CNS3XXX_GPIOA_BASE_VIRT,
+		.pfn            = __phys_to_pfn(CNS3XXX_GPIOA_BASE),
+		.length         = PAGE_SIZE,
+		.type           = MT_DEVICE,
+	}, {
+	        .virtual        = CNS3XXX_GPIOB_BASE_VIRT,
+		.pfn            = __phys_to_pfn(CNS3XXX_GPIOB_BASE),
+		.length         = PAGE_SIZE,
+		.type           = MT_DEVICE,
 	}, {
 		.virtual	= CNS3XXX_PM_BASE_VIRT,
 		.pfn		= __phys_to_pfn(CNS3XXX_PM_BASE),
-		.length		= SZ_4K,
+		.length		= MAX(SZ_4K, PAGE_SIZE),
+		.type		= MT_DEVICE,
+	}, {
+		.virtual	= CNS3XXX_SSP_BASE_VIRT,
+		.pfn		= __phys_to_pfn(CNS3XXX_SSP_BASE),
+		.length		= SZ_64K,
+		.type		= MT_DEVICE,
+	}, {
+		.virtual	= CNS3XXX_USB_BASE_VIRT,
+		.pfn		= __phys_to_pfn(CNS3XXX_USB_BASE),
+		.length		= SZ_64K,
 		.type		= MT_DEVICE,
 #ifdef CONFIG_PCI
 	}, {
 		.virtual	= CNS3XXX_PCIE0_HOST_BASE_VIRT,
 		.pfn		= __phys_to_pfn(CNS3XXX_PCIE0_HOST_BASE),
-		.length		= SZ_4K,
+		.length		= MAX(SZ_4K, PAGE_SIZE),
 		.type		= MT_DEVICE,
 	}, {
 		.virtual	= CNS3XXX_PCIE0_CFG0_BASE_VIRT,
 		.pfn		= __phys_to_pfn(CNS3XXX_PCIE0_CFG0_BASE),
-		.length		= SZ_64K, /* really 4 KiB at offset 32 KiB */
+		.length		= MAX(SZ_4K, PAGE_SIZE), /* really 4 KiB at offset 32 KiB */
 		.type		= MT_DEVICE,
 	}, {
 		.virtual	= CNS3XXX_PCIE0_CFG1_BASE_VIRT,
@@ -63,7 +83,7 @@ static struct map_desc cns3xxx_io_desc[] __initdata = {
 	}, {
 		.virtual	= CNS3XXX_PCIE1_HOST_BASE_VIRT,
 		.pfn		= __phys_to_pfn(CNS3XXX_PCIE1_HOST_BASE),
-		.length		= SZ_4K,
+		.length		= SZ_64K,
 		.type		= MT_DEVICE,
 	}, {
 		.virtual	= CNS3XXX_PCIE1_CFG0_BASE_VIRT,
@@ -122,6 +142,7 @@ static int cns3xxx_set_oneshot(struct clock_event_device *clk)
 
 	/* period set, and timer enabled in 'next_event' hook */
 	ctrl |= (1 << 2) | (1 << 9);
+	writel(0, cns3xxx_tmr1 + TIMER1_AUTO_RELOAD_OFFSET);
 	writel(ctrl, cns3xxx_tmr1 + TIMER1_2_CONTROL_OFFSET);
 	return 0;
 }
@@ -132,7 +153,7 @@ static int cns3xxx_set_periodic(struct clock_event_device *clk)
 	int pclk = cns3xxx_cpu_clock() / 8;
 	int reload;
 
-	reload = pclk * 20 / (3 * HZ) * 0x25000;
+	reload = pclk * 1000000 / HZ;
 	writel(reload, cns3xxx_tmr1 + TIMER1_AUTO_RELOAD_OFFSET);
 	ctrl |= (1 << 0) | (1 << 2) | (1 << 9);
 	writel(ctrl, cns3xxx_tmr1 + TIMER1_2_CONTROL_OFFSET);
@@ -159,8 +180,8 @@ static struct clock_event_device cns3xxx_tmr1_clockevent = {
 	.set_state_oneshot	= cns3xxx_set_oneshot,
 	.tick_resume		= cns3xxx_shutdown,
 	.set_next_event		= cns3xxx_timer_set_next_event,
-	.rating			= 350,
-	.cpumask		= cpu_all_mask,
+	.rating			= 300,
+	.cpumask		= cpu_possible_mask,
 };
 
 static void __init cns3xxx_clockevents_init(unsigned int timer_irq)
@@ -257,7 +278,7 @@ void __init cns3xxx_timer_init(void)
 
 void __init cns3xxx_l2x0_init(void)
 {
-	void __iomem *base = ioremap(CNS3XXX_L2C_BASE, SZ_4K);
+	void __iomem *base = ioremap(CNS3XXX_L2C_BASE, MAX(SZ_4K, PAGE_SIZE));
 	u32 val;
 
 	if (WARN_ON(!base))
@@ -295,58 +316,6 @@ void __init cns3xxx_l2x0_init(void)
 
 #endif /* CONFIG_CACHE_L2X0 */
 
-static int csn3xxx_usb_power_on(struct platform_device *pdev)
-{
-	/*
-	 * EHCI and OHCI share the same clock and power,
-	 * resetting twice would cause the 1st controller been reset.
-	 * Therefore only do power up  at the first up device, and
-	 * power down at the last down device.
-	 *
-	 * Set USB AHB INCR length to 16
-	 */
-	if (atomic_inc_return(&usb_pwr_ref) == 1) {
-		cns3xxx_pwr_power_up(1 << PM_PLL_HM_PD_CTRL_REG_OFFSET_PLL_USB);
-		cns3xxx_pwr_clk_en(1 << PM_CLK_GATE_REG_OFFSET_USB_HOST);
-		cns3xxx_pwr_soft_rst(1 << PM_SOFT_RST_REG_OFFST_USB_HOST);
-		__raw_writel((__raw_readl(MISC_CHIP_CONFIG_REG) | (0X2 << 24)),
-			MISC_CHIP_CONFIG_REG);
-	}
-
-	return 0;
-}
-
-static void csn3xxx_usb_power_off(struct platform_device *pdev)
-{
-	/*
-	 * EHCI and OHCI share the same clock and power,
-	 * resetting twice would cause the 1st controller been reset.
-	 * Therefore only do power up  at the first up device, and
-	 * power down at the last down device.
-	 */
-	if (atomic_dec_return(&usb_pwr_ref) == 0)
-		cns3xxx_pwr_clk_dis(1 << PM_CLK_GATE_REG_OFFSET_USB_HOST);
-}
-
-static struct usb_ehci_pdata cns3xxx_usb_ehci_pdata = {
-	.power_on	= csn3xxx_usb_power_on,
-	.power_off	= csn3xxx_usb_power_off,
-};
-
-static struct usb_ohci_pdata cns3xxx_usb_ohci_pdata = {
-	.num_ports	= 1,
-	.power_on	= csn3xxx_usb_power_on,
-	.power_off	= csn3xxx_usb_power_off,
-};
-
-static const struct of_dev_auxdata cns3xxx_auxdata[] __initconst = {
-	{ "intel,usb-ehci", CNS3XXX_USB_BASE, "ehci-platform", &cns3xxx_usb_ehci_pdata },
-	{ "intel,usb-ohci", CNS3XXX_USB_OHCI_BASE, "ohci-platform", &cns3xxx_usb_ohci_pdata },
-	{ "cavium,cns3420-ahci", CNS3XXX_SATA2_BASE, "ahci", NULL },
-	{ "cavium,cns3420-sdhci", CNS3XXX_SDIO_BASE, "ahci", NULL },
-	{},
-};
-
 static void __init cns3xxx_init(void)
 {
 	struct device_node *dn;
@@ -380,7 +349,6 @@ static void __init cns3xxx_init(void)
 	
 		/* MMC/SD pins share with GPIOA */
 		gpioa_pins |= 0x1fff0004;
-		__raw_writel(gpioa_pins, gpioa);
 	
 		cns3xxx_pwr_clk_en(CNS3XXX_PWR_CLK_EN(SDIO));
 		cns3xxx_pwr_soft_rst(CNS3XXX_PWR_SOFTWARE_RST(SDIO));
@@ -388,7 +356,6 @@ static void __init cns3xxx_init(void)
 
 	pm_power_off = cns3xxx_power_off;
 
-	of_platform_default_populate(NULL, cns3xxx_auxdata, NULL);
 }
 
 static const char *const cns3xxx_dt_compat[] __initconst = {
diff --git a/arch/arm/mach-cns3xxx/devices.c b/arch/arm/mach-cns3xxx/devices.c
index 0f1ba8a03..50beff86c 100644
--- a/arch/arm/mach-cns3xxx/devices.c
+++ b/arch/arm/mach-cns3xxx/devices.c
@@ -13,8 +13,9 @@
 #include <linux/compiler.h>
 #include <linux/dma-mapping.h>
 #include <linux/platform_device.h>
-#include "cns3xxx.h"
-#include "pm.h"
+//#include <mach/irqs.h>
+#include <linux/platform_data/cns3xxx.h>
+#include <mach/pm.h>
 #include "core.h"
 #include "devices.h"
 
@@ -94,9 +95,17 @@ static struct platform_device cns3xxx_sdhci_pdev = {
 
 void __init cns3xxx_sdhci_init(void)
 {
-	u32 __iomem *gpioa = IOMEM(CNS3XXX_MISC_BASE_VIRT + 0x0014);
+        u32 __iomem *gpioa = IOMEM(CNS3XXX_MISC_BASE_VIRT + 0x0014);  // MISC_GPIOA_PIN_DISABLE_OFFSET
 	u32 gpioa_pins = __raw_readl(gpioa);
 
+#ifdef CONFIG_MACH_SEAGATE
+	printk (" %s WARNING : Loading the sdhci driver will stop usb working\n", __FUNCTION__);
+	printk ("    on the Seagate Central. \n");
+#endif
+	/*
+	 * N.B. The following register change disables USB support
+	 * on Seagate Central Single Drive NAS so use with caution.
+	 */
 	/* MMC/SD pins share with GPIOA */
 	gpioa_pins |= 0x1fff0004;
 	__raw_writel(gpioa_pins, gpioa);
diff --git a/arch/arm/mach-cns3xxx/pm.c b/arch/arm/mach-cns3xxx/pm.c
index 72e8a7ec7..de2a3fe2b 100644
--- a/arch/arm/mach-cns3xxx/pm.c
+++ b/arch/arm/mach-cns3xxx/pm.c
@@ -8,9 +8,15 @@
 #include <linux/io.h>
 #include <linux/delay.h>
 #include <linux/atomic.h>
-#include "cns3xxx.h"
-#include "pm.h"
+#include <linux/platform_data/cns3xxx.h>
+#include <mach/pm.h>
 #include "core.h"
+#include <linux/seq_file.h>
+#include <linux/proc_fs.h>
+
+static struct proc_dir_entry *cns3xxx_pm_proc_entry;
+static struct proc_dir_entry *cns3xxx_pm_clk_proc_entry;
+static struct proc_dir_entry *cns3xxx_pm_pll_pd_proc_entry;
 
 void cns3xxx_pwr_clk_en(unsigned int block)
 {
@@ -30,6 +36,21 @@ void cns3xxx_pwr_clk_dis(unsigned int block)
 }
 EXPORT_SYMBOL(cns3xxx_pwr_clk_dis);
 
+/*
+ * void cns3xxx_pwr_lp_hs - enable lower power handshake
+ * @dev: bitmap for device
+ */
+static void cns3xxx_lp_hs(unsigned int dev)
+{
+    u32 data;
+    void *addr;
+
+    addr = PM_HS_CFG_REG; 
+    data = readl(addr);
+    data |= (PM_HS_CFG_REG_MASK_SUPPORT & dev);
+    writel(data, addr);
+} 
+
 void cns3xxx_pwr_power_up(unsigned int block)
 {
 	u32 reg = __raw_readl(PM_PLL_HM_PD_CTRL_REG);
@@ -116,5 +137,282 @@ int cns3xxx_cpu_clock(void)
 }
 EXPORT_SYMBOL(cns3xxx_cpu_clock);
 
+void cns3xxx_wfi(void)
+{
+
+        mb();
+	asm volatile(
+	    "mov r0, #0\n"
+	    "mcr p15, 0, r0, c7, c10, 4\n"
+	    "mcr p15, 0, r0, c7, c0, 4\n"
+	    );
+}
+EXPORT_SYMBOL(cns3xxx_wfi);
+
+/*
+ * cns3xxx_pwr_mode - change CPU power mode
+ * @pwr_mode: CPU power mode
+ */
+void cns3xxx_pwr_mode(unsigned int pwr_mode)
+{
+        u32 data;
+	u32 __iomem *addr;
+
+	if (CNS3XXX_PWR_CPU_MODE_HIBERNATE < pwr_mode)
+	    return;
+	
+	addr = (u32*)CNS3XXX_PM_BASE_VIRT + 0x014; /* PM_CLK_CTRL_REG */
+	
+	data = readl(addr);
+	data &= ~(0x7 << PM_CLK_CTRL_REG_OFFSET_CPU_PWR_MODE);
+	data |= ((pwr_mode & 0x7)<<PM_CLK_CTRL_REG_OFFSET_CPU_PWR_MODE);
+	writel(data, addr);
+}
+EXPORT_SYMBOL(cns3xxx_pwr_mode);
+
 atomic_t usb_pwr_ref = ATOMIC_INIT(0);
 EXPORT_SYMBOL(usb_pwr_ref);
+
+
+static int cns3xxx_pm_clk_write_proc(struct file *file, const char *buffer,
+				     size_t count, loff_t *ppos)
+{
+    if (count) {
+	unsigned int index = PM_CLK_GATE_REG_OFFSET_SDIO + 1, val = 2;
+	sscanf(buffer, "%u %u", &index, &val);
+	if (1 < val)
+	    goto clk_debug_exit;
+
+	if ((0x1 << index) & PM_CLK_GATE_REG_MASK) {
+	    if (val)
+		PM_CLK_GATE_REG_VALUE |= (0x1 << index);
+	    else
+		PM_CLK_GATE_REG_VALUE &= ~(0x1 << index);
+	}
+    }
+clk_debug_exit:
+    return count;
+}
+
+static int cns3xxx_pm_clk_read_proc(struct seq_file *seq, void *unused) {
+#define CLK_STRING(DEV) \
+    "(%.2d): %s\n", PM_CLK_GATE_REG_OFFSET_##DEV, (0x1 & (reg >> \
+							  PM_CLK_GATE_REG_OFFSET_##DEV)) ? "On" : "Off"
+
+    int reg = PM_CLK_GATE_REG_VALUE;
+
+    seq_printf(seq, "PM_CLK_GATE_REG 0x%.8x\n", reg);
+    seq_printf(seq, "SMC  "CLK_STRING(SMC_NFI));
+    seq_printf(seq, "SPI/I2C "CLK_STRING(SPI_PCM_I2C));
+    seq_printf(seq, "GDMA        "CLK_STRING(GDMA));
+    seq_printf(seq, "RTC  "CLK_STRING(RTC));
+    seq_printf(seq, "UART0   "CLK_STRING(UART0));
+    seq_printf(seq, "UART1   "CLK_STRING(UART1));
+    seq_printf(seq, "UART2   "CLK_STRING(UART2));
+    seq_printf(seq, "GPIO        "CLK_STRING(GPIO));
+    seq_printf(seq, "SWITCH  "CLK_STRING(SWITCH));
+    seq_printf(seq, "HCIE        "CLK_STRING(HCIE));
+    seq_printf(seq, "CRYPTO  "CLK_STRING(CRYPTO));
+    seq_printf(seq, "TIMER   "CLK_STRING(TIMER));
+    seq_printf(seq, "USB_OTG "CLK_STRING(USB_OTG));
+    seq_printf(seq, "USB_HOST"CLK_STRING(USB_HOST));
+    seq_printf(seq, "PCIE1   "CLK_STRING(PCIE(1)));
+    seq_printf(seq, "PCIE0   "CLK_STRING(PCIE(0)));
+    seq_printf(seq, "SATA        "CLK_STRING(SATA));
+    seq_printf(seq, "RAID        "CLK_STRING(RAID));
+    seq_printf(seq, "I2S  "CLK_STRING(I2S));
+    seq_printf(seq, "LCDC        "CLK_STRING(LCDC));
+    seq_printf(seq, "CIM  "CLK_STRING(CIM));
+    seq_printf(seq, "GPU  "CLK_STRING(GPU));
+    seq_printf(seq, "SDIO        "CLK_STRING(SDIO));
+
+    return 0;
+} /* cns3xxx_pm_clk_read_proc() */
+
+static int cns3xxx_pm_clk_open_proc(struct inode *inode, struct file *file)
+{
+    return single_open(file, cns3xxx_pm_clk_read_proc, &inode->i_private);
+}
+
+static const struct proc_ops cns3xxx_pm_clk_fops = {
+    .proc_open           = cns3xxx_pm_clk_open_proc,
+    .proc_read           = seq_read,
+    .proc_lseek          = seq_lseek,
+    .proc_release        = single_release,
+    .proc_write          = cns3xxx_pm_clk_write_proc,
+};
+
+
+static int cns3xxx_pm_pll_pd_write_proc(struct file *file, const char *buffer,
+					size_t count, loff_t *ppos)
+{
+    if (count) {
+	unsigned int index = PM_PLL_HM_PD_CTRL_REG_OFFSET_SATA_PHY1 + 1;
+	unsigned int val = 2;
+	sscanf(buffer, "%u %u", &index, &val);
+	if (1 < val)
+	    goto clk_debug_exit;
+
+	if ((0x1 << index) & PM_PLL_HM_PD_CTRL_REG_MASK) {
+	    if (val)
+		PM_PLL_HM_PD_CTRL_REG_VALUE |= (0x1 << index);
+	    else
+		PM_PLL_HM_PD_CTRL_REG_VALUE &= ~(0x1 << index);
+	}
+    }
+clk_debug_exit:
+    return count;
+} /* cns3xxx_pm_pll_pd_write_proc() */
+
+static int cns3xxx_pm_pll_pd_read_proc(struct seq_file *seq, void *unused)
+{
+#define PLL_PD_STRING(DEV) \
+    "(%.2d): %s\n", \
+	PM_PLL_HM_PD_CTRL_REG_OFFSET_PLL_##DEV, \
+	(0x1 & (reg>>PM_PLL_HM_PD_CTRL_REG_OFFSET_PLL_##DEV)) ? "Power Down" : \
+	        "Power Up"
+
+#define PHY_PD_STRING(DEV) \
+    "(%.2d): %s\n", \
+	PM_PLL_HM_PD_CTRL_REG_OFFSET_##DEV, \
+	(0x1 & (reg >> PM_PLL_HM_PD_CTRL_REG_OFFSET_##DEV)) ? "Power Down" : \
+	        "Power Up"
+
+    int reg = PM_PLL_HM_PD_CTRL_REG_VALUE;
+
+    seq_printf(seq, "PM_PLL_HM_PD_CTRL_REG 0x%.8x\n", reg);
+    seq_printf(seq, "RGMII        "PLL_PD_STRING(RGMII));
+    seq_printf(seq, "USB    "PLL_PD_STRING(USB));
+    seq_printf(seq, "LCD    "PLL_PD_STRING(LCD));
+    seq_printf(seq, "I2S    "PLL_PD_STRING(I2S));
+    seq_printf(seq, "I2SCD        "PLL_PD_STRING(I2SCD));
+    seq_printf(seq, "SATA_PHY0 "PHY_PD_STRING(SATA_PHY0));
+    seq_printf(seq, "SATA_PHY1 "PHY_PD_STRING(SATA_PHY1));
+
+    return 0;
+} /* cns3xxx_pm_pll_pd_read_proc() */
+
+static int cns3xxx_pm_pll_pd_open_proc(struct inode *inode, struct file *file)
+{
+    return single_open(file, cns3xxx_pm_pll_pd_read_proc, &inode->i_private);
+}
+
+static const struct proc_ops cns3xxx_pm_pll_pd_fops = {
+    .proc_open           = cns3xxx_pm_pll_pd_open_proc,
+    .proc_read           = seq_read,
+    .proc_lseek          = seq_lseek,
+    .proc_release        = single_release,
+    .proc_write          = cns3xxx_pm_pll_pd_write_proc,
+};
+
+
+const int ddr_speed_str[] = {200, 266, 333, 400};
+
+static int cns3xxx_pm_read_proc(struct seq_file *seq, void *unused)
+{
+
+    seq_printf(seq, "CLK_GATE_REG         0x%.8x\n",
+	       PM_CLK_GATE_REG_VALUE);
+    seq_printf(seq, "SOFT_RST_REG         0x%.8x\n",
+	       PM_SOFT_RST_REG_VALUE);
+    seq_printf(seq, "HS_CFG_REG     0x%.8x\n", PM_HS_CFG_REG_VALUE);
+    seq_printf(seq, "CACTIVE_STA_REG       0x%.8x\n",
+	       PM_CACTIVE_STA_REG_VALUE);
+    seq_printf(seq, "PWR_STA_REG   0x%.8x\n", PM_PWR_STA_REG_VALUE);
+    seq_printf(seq, "CLK_CTRL_REG         0x%.8x\n",
+	       PM_CLK_CTRL_REG_VALUE);
+    seq_printf(seq, "PLL_LCD_I2S_CTRL_REG 0x%.8x\n",
+	       PM_PLL_LCD_I2S_CTRL_REG_VALUE);
+    seq_printf(seq, "PLL_HM_PD_CTRL_REG   0x%.8x\n",
+	       PM_PLL_HM_PD_CTRL_REG_VALUE);
+    seq_printf(seq, "REGULAT_CTRL_REG     0x%.8x\n",
+	       PM_REGULAT_CTRL_REG_VALUE);
+    seq_printf(seq, "WDT_CTRL_REG         0x%.8x\n",
+	       PM_WDT_CTRL_REG_VALUE);
+    seq_printf(seq, "WU_CTRL0_REG         0x%.8x\n",
+	       PM_WU_CTRL0_REG_VALUE);
+    seq_printf(seq, "WU_CTRL1_REG         0x%.8x\n",
+	       PM_WU_CTRL1_REG_VALUE);
+    seq_printf(seq, "CSR_REG 0x%.8x\n", PM_CSR_REG_VALUE);
+
+    seq_printf(seq, "PLL CPU Frequency: ");
+    switch (PM_CLK_CTRL_REG_VALUE & 0xf) {
+    case 0:
+	seq_printf(seq, "300MHz\n");
+	break;
+    case 1:
+	seq_printf(seq, "333MHz\n");
+	break;
+    case 2:
+	seq_printf(seq, "366MHz\n");
+	break;
+    case 3:
+	seq_printf(seq, "400MHz\n");
+	break;
+    case 4:
+	seq_printf(seq, "433MHz\n");
+	break;
+    case 5:
+	seq_printf(seq, "466MHz\n");
+	break;
+    case 6:
+	seq_printf(seq, "500MHz\n");
+	break;
+    case 7:
+	seq_printf(seq, "533MHz\n");
+	break;
+    case 8:
+	seq_printf(seq, "566MHz\n");
+	break;
+    case 9:
+	seq_printf(seq, "600MHz\n");
+	break;
+    default:
+	seq_printf(seq, "!!!!!\n");
+    }
+
+    seq_printf(seq, "CPU clock divider: %d\n",
+		   0x1 << ((PM_CLK_CTRL_REG_VALUE >> 4) & 0x3));
+    seq_printf(seq, "CPU clock: %d MHz\n",
+		   cns3xxx_cpu_clock());
+    seq_printf(seq, "DDR2 clock %d MHz\n",
+		   ddr_speed_str[(PM_CLK_CTRL_REG_VALUE >> 7) & 0x3]);
+    
+    return 0;
+}
+
+static int cns3xxx_pm_open_proc(struct inode *inode, struct file *file)
+{
+    return single_open(file, cns3xxx_pm_read_proc, &inode->i_private);
+}
+
+static const struct proc_ops cns3xxx_pm_fops = {
+    .proc_open           = cns3xxx_pm_open_proc,
+    .proc_read           = seq_read,
+    .proc_lseek         = seq_lseek,
+    .proc_release        = single_release,
+};
+
+static int __init cns3xxx_pm_proc_init(void)
+{
+    cns3xxx_pm_proc_entry = proc_create("pm", S_IFREG | S_IRUGO,
+					cns3xxx_proc_dir, &cns3xxx_pm_fops);
+    cns3xxx_pm_clk_proc_entry = proc_create("pm_clk", S_IFREG | S_IRUGO,
+					    cns3xxx_proc_dir, &cns3xxx_pm_clk_fops);
+    cns3xxx_pm_pll_pd_proc_entry = proc_create("pm_pll_pd", S_IFREG | S_IRUGO,
+					       cns3xxx_proc_dir, &cns3xxx_pm_pll_pd_fops);
+    return 1;
+}
+
+
+static int __init cns3xxx_pm_init(void) {
+
+    cns3xxx_lp_hs(PM_HS_CFG_REG_MASK_SUPPORT);
+    cns3xxx_pm_proc_init();
+    return 0;
+}
+        
+
+
+
+late_initcall(cns3xxx_pm_init);
